! function($) {
	"use strict";
	var BootstrapPaginator = function(element, options) {
			this.init(element, options)
		},
		old = null;
	BootstrapPaginator.prototype = {
		init: function(element, options) {
			this.$element = $(element);
			var version = options && options.bootstrapMajorVersion ? options.bootstrapMajorVersion : $.fn.bootstrapPaginator.defaults.bootstrapMajorVersion,
				id = this.$element.attr("id");
			    options.id = id;
			if (2 === version && !this.$element.is("div")) throw "";
			if (version > 2 && !this.$element.is("ul")) throw "";
			this.id = id;
			this.currentPage = 1, this.lastPage = 1, this.setOptions(options), this.initialized = !0
		},
		setOptions: function(options) {
			this.options = $.extend({}, this.options || $.fn.bootstrapPaginator.defaults, options), 
			this.totalPages = parseInt(this.options.totalPages, 10), 
			this.pageSize = parseInt(this.options.pageSize, 10), 
			this.pageAllSize = parseInt(this.options.pageAllSize, 10), 
			this.numberOfPages = parseInt(this.options.numberOfPages, 10), 
			
			this.totalNumber = parseInt(this.options.totalNumber, 10), 
			this.showPreviouButton = parseInt(this.options.showPreviouButton, 10), 
			this.showNextButton = parseInt(this.options.showNextButton, 10), 
		
			
			this.showGoInput = parseInt(this.options.showGoInput, 10), 
			this.showGoButton = parseInt(this.options.showGoButton, 10), 
			this.showPageNumbers = parseInt(this.options.showPageNumbers, 10), 
			
			this.size = this.options.size;
			
			options && "undefined" != typeof options.currentPage && this.setCurrentPage(options.currentPage), 
			this.listen(), 
			this.render(), 
			this.initialized || this.lastPage === this.currentPage || this.$element.trigger("page-changed", [this.lastPage, this.currentPage])
		},
		listen: function() {
			this.$element.off("page-clicked"), this.$element.off("page-changed"), "function" == typeof this.options.onPageClicked && this.$element.bind("page-clicked", this.options.onPageClicked), "function" == typeof this.options.onPageChanged && this.$element.on("page-changed", this.options.onPageChanged), this.$element.bind("page-clicked", this.onPageClicked)
		},
		destroy: function() {
			this.$element.off("page-clicked"), this.$element.off("page-changed"), this.$element.removeData("bootstrapPaginator"), this.$element.empty()
		},
		show: function(page) {
			this.setCurrentPage(page), this.render(), this.lastPage !== this.currentPage && this.$element.trigger("page-changed", [this.lastPage, this.currentPage])
		},
		showNext: function() {
			var pages = this.getPages();
			pages.next && this.show(pages.next)
		},
		showPrevious: function() {
			var pages = this.getPages();
			pages.prev && this.show(pages.prev)
		},
		showFirst: function() {
			var pages = this.getPages();
			pages.first && this.show(pages.first)
		},
		showLast: function() {
			var pages = this.getPages();
			pages.last && this.show(pages.last)
		},
		onPageItemClicked: function(event) {
			
			if(event.data.type  == "leftPoint" || event.data.type == "rightPoint" ){
				return;
			}
			var pageInfo = {};
			pageInfo.pageSize = this.pageSize; //每页条数
			pageInfo.pageAllNum = this.pageAllSize;//总条数
			pageInfo.pageNum =  parseInt(event.data.page, 10); //当前页数
			pageInfo.pageAllSize = this.totalPages;//总页数
			var type = event.data.type,
				page = parseInt(event.data.page, 10);
			   
			this.$element.trigger("page-clicked", [event, type, page,pageInfo])
		},
		onPageClicked: function(event, originalEvent, type, page) {
			var currentTarget = $(event.currentTarget);
			switch (type) {
				case "first":
					currentTarget.bootstrapPaginator("showFirst");
					break;
				case "prev":
					currentTarget.bootstrapPaginator("showPrevious");
					break;
				case "next":
					currentTarget.bootstrapPaginator("showNext");
					break;
				case "last":
					currentTarget.bootstrapPaginator("showLast");
					break;
				case "page":
					currentTarget.bootstrapPaginator("show", page)
			}
		},
		render: function() {
			var containerClass = this.getValueFromOption(this.options.containerClass, this.$element),
				size = this.options.size || "normal",
				alignment = this.options.alignment || "left",
				pages = this.getPages(),
				
				
				listContainer = 2 === this.options.bootstrapMajorVersion ? $("<ul></ul>") : this.$element,
				listContainerClass = 2 === this.options.bootstrapMajorVersion ? this.getValueFromOption(this.options.listContainerClass, listContainer) : null,
				first = null,
				prev = null,
				leftPoint = null,
				rightPoint = null,
				next = null,
				last = null,
				pageInput = null,
				pageSizeInfo = null,
				pageButton = null,
				pageNoInfo = null,
				p = null,
				i = 0;
				
			switch (this.$element.prop("class", ""), this.$element.addClass("pagination"), size.toLowerCase()) {
				case "large":
				case "small":
				case "mini":
					this.$element.addClass($.fn.bootstrapPaginator.sizeArray[this.options.bootstrapMajorVersion][size.toLowerCase()])
			}
			if (2 === this.options.bootstrapMajorVersion) switch (alignment.toLowerCase()) {
				case "center":
					this.$element.addClass("pagination-centered");
					break;
				case "right":
					this.$element.addClass("pagination-right")
			}
			for (this.$element.addClass(containerClass), this.$element.empty(), 2 === this.options.bootstrapMajorVersion && (this.$element.append(listContainer), listContainer.addClass(listContainerClass)), 
			this.pageRef = [], 
			
			pages.prev && (prev = this.buildPageItem("prev", pages.prev), prev && listContainer.append(prev)), 
			pages.first && (first = this.buildPageItem("first", pages.first), first && listContainer.append(first)), 
			pages.leftPoint && (leftPoint = this.buildPageItem("leftPoint", pages.leftPoint), leftPoint && listContainer.append(leftPoint)),i = 0; i < pages.length; i += 1) p = this.buildPageItem("page", pages[i]), p && listContainer.append(p);
			pages.rightPoint && (rightPoint = this.buildPageItem("rightPoint", pages.rightPoint), rightPoint && listContainer.append(rightPoint)),
			pages.last && (last = this.buildPageItem("last", pages.last), last && listContainer.append(last)),
			pages.next && (next = this.buildPageItem("next", pages.next), next && listContainer.append(next)),
			pages.prev && (pageInput = this.setPageInfo(), pageInput && listContainer.append(pageInput)),
			pages.prev && (pageButton = this.clickBtnPageGo(), pageButton && listContainer.append(pageButton)),
			pages.prev && (pageSizeInfo = this.setPageSizeInfo(), pageSizeInfo && listContainer.append(pageSizeInfo))
			pages.prev && (pageNoInfo = this.setPageNoInfo(), pageNoInfo && listContainer.append(pageNoInfo))
			
			
		},
		//设置每页条数/ 显示总条数
		setPageSizeInfo:function(){
			if(!this.showPageNumbers){
				return;
			}
			var className = "pagination-goBution-normal";
			switch (this.size.toLowerCase()) {
			case "large":
				className = "pagination-goBution-large";
				break;
			case "small":
				className = "pagination-goBution-small";
				break;
			case "mini":
				className = "pagination-goBution-mini";
				break;
		    }
			var itemContainer = $("<li ></li>");
			var e = $("<a style='padding:0px;cursor: pointer;'></a>");
			var f = $("<div class='dropup'></div>");
			var disabled = "";
			if(this.pageAllSize == 0){
				disabled = "disabled";
			}
			var a =$("<button "+disabled+" class='btn btn-default "+className+" dropdown-toggle' type='button' id='dropdownMenu-"+this.id+"' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'>"+this.pageSize+"&nbsp;&nbsp;条/页&nbsp;&nbsp;</button>");
			var b =$("<ul class='dropdown-menu' id='drop-ul-"+this.id+"' aria-labelledby='dropdownMenu-"+this.id+"' style='min-width:60px;'></ul>");
			var span =$("<span class='caret'></span>");
			var liNode = '';
			liNode+='<li><a href="#">10</a></li>';
		    liNode+='<li><a href="#">20</a></li>';	
		    liNode+='<li><a href="#">30</a></li>';
		    liNode+='<li><a href="#">50</a></li>';
		    liNode+='<li><a href="#">100</a></li>';
			e.append(f)
		    f.append(a);
			a.append(span);
			f.append(b);
			b.append(liNode);
		    itemContainer.append(e);
			return b.on("click", null, {}, $.proxy(this.setPageSize, this)),a.on("mousedown", null, {}, $.proxy(this.btnDropdown, this)),itemContainer
		},
		btnDropdown:function(e){
			var ul = e.target.nextSibling;
			$('#'+ul.id).css("display","block");
		},
		setPageSize:function(e){
			if(e.target){
				if(e.target.innerHTML && !isNaN(e.target.innerHTML)){
					var pageSize =  e.target.innerHTML;
					var pageSize = parseInt(pageSize);
					
					if(this.pageSize != pageSize){
						this.pageSize = pageSize;
					}else{
						return;
					}
					var temp = Math.ceil(this.pageAllSize / this.pageSize);
					var option = {};
					option.pageSize = this.pageSize; //每页条数
					option.pageAllSize = this.pageAllSize;//总条数
					option.totalPages = temp;//总页数
					option.currentPage = 1; //当前页数
					this.setOptions(option);
					e.data.type = "page",
					e.data.page = 1;
					this.onPageItemClicked(e);
				}else{
					return;
				}
			}
		},
		//设置跳转页面
		setPageInfo:function(){
			if(!this.showGoInput){
				return;
			}
			var className = "pagination-goText-normal";
			var classNameA = "pagination-INPUT-normal";
			switch (this.size.toLowerCase()) {
			case "large":
				className = "pagination-goText-large";
				classNameA = "pagination-INPUT-large";
				break;
			case "small":
				className = "pagination-goText-small";
				classNameA = "pagination-INPUT-small";
				break;
			case "mini":
				className = "pagination-goText-mini";
				classNameA = "pagination-INPUT-mini";
				break;
		    }
			var itemContainer = $("<li></li>");
			var itemContent = $("<a class='"+classNameA+"'></a>");
			var disabled = "";
			if(this.pageAllSize == 0){
				disabled = "disabled";
			}
			var d = $("<INPUT  "+disabled+" id='goButtonText_"+this.id+"' class='"+className+"' value='"+this.currentPage+"' type=text>");
			itemContent.append(d);
			return itemContainer.append(itemContent),d.on("keydown", null, {}, $.proxy(this.onkeyDown, this)),
			itemContainer
			
		},
		onkeyDown : function(e) {
			if(this.pageAllSize == 0){
				return;
			}
			if (e && e.keyCode === 13) {
				var pageNum = e.target.value;
				var reg = /^\d+$/;
			   if (!pageNum.match(reg)){
				   e.target.value = this.currentPage;
			    }else{    
			    	if (pageNum > this.totalPages) {
						pageNum = this.totalPages
					} else if (!(pageNum > 0)) {
						pageNum = this.currentPage;
					}
					
					e.data.type = "page",
					e.data.page = pageNum;
					this.onPageItemClicked(e);
			    }  
			} else {
				return;
			}
		},
		
		//设置跳转页面
		clickBtnPageGo:function(){
			if(!this.showGoButton){
				return;
			}
			var className = "pagination-goBution-normal";
			switch (this.size.toLowerCase()) {
			case "large":
				className = "pagination-goBution-large";
				break;
			case "small":
				className = "pagination-goBution-small";
				break;
			case "mini":
				className = "pagination-goBution-mini";
				break;
		    }
			var itemContainer = $("<li></li>");
			var g = $("<a style='padding:0px;cursor: pointer;'></a>")
			var disabled = "";
			if(this.pageAllSize == 0){
				disabled = "disabled";
			}
			var h = $("<button "+disabled+" class='btn btn-default "+className+" '>跳转</button>")
			g.append(h);
			return itemContainer.append(g),h.on("click", null, {}, $.proxy(this.goPageButton, this)),itemContainer
		},
		
		setPageNoInfo:function(){
			if(!this.totalNumber){
				return;
			}
			var itemContainer = $("<li></li>");
			var a =$("<a>共&nbsp;"+this.pageAllSize+"&nbsp;条</a>");
		    itemContainer.append(a);
			return itemContainer
		},
		
		goPageButton:function(e){
		   var page = $("#goButtonText_"+this.id).val();
		   var reg = /^\d+$/;
		   if (page.match(reg)){
			   
			    var page = parseInt(page, 10);
			   
				if(page!=this.currentPage){
					
					if(page > this.totalPages){
						page = this.totalPages;
					}
					e.data.type = "page",
					e.data.page = page;
					this.onPageItemClicked(e);
				}
		   }
		},
		buildPageItem: function(type, page) {
			var itemContainer = $("<li></li>"),
				itemContent = $("<a style='cursor: pointer;'></a>"),
				text = "",
				title = "",
				itemContainerClass = this.options.itemContainerClass(type, page, this.currentPage),
				itemContentClass = this.getValueFromOption(this.options.itemContentClass, type, page, this.currentPage),
				tooltipOpts = null;
			var isAdd = true;
			switch (type) {
				case "first":
					if (!this.getValueFromOption(this.options.shouldShowPage, type, page, this.currentPage)){
						itemContainerClass = "";
						itemContainer.toggleClass('disabled');
					}
					text = this.options.itemTexts(type, page, this.currentPage), 
					title = this.options.tooltipTitles(type, page, this.currentPage);
					break;
				case "last":
					if (!this.getValueFromOption(this.options.shouldShowPage, type, page, this.currentPage)) {
						itemContainerClass = "";
						itemContainer.toggleClass('disabled');
					}
					text = this.options.itemTexts(type, page, this.currentPage), 
					title = this.options.tooltipTitles(type, page, this.currentPage);
					break;
				case "prev":
					if(!this.showPreviouButton){
						isAdd = false;
					}else{
						if (!this.getValueFromOption(this.options.shouldShowPage, type, page, this.currentPage)) {
							itemContainerClass = "";
							itemContainer.toggleClass('disabled');
						}
						text = this.options.itemTexts(type, page, this.currentPage), 
						title = this.options.tooltipTitles(type, page, this.currentPage);
					}
					break;
				case "next":
					if(!this.showNextButton){
						isAdd = false;
					}else{
						if (!this.getValueFromOption(this.options.shouldShowPage, type, page, this.currentPage)) {
							itemContainerClass = "";
							itemContainer.toggleClass('disabled');
						}
						text = this.options.itemTexts(type, page, this.currentPage), 
						title = this.options.tooltipTitles(type, page, this.currentPage);
					}
					break;
				case "page":
					if (!this.getValueFromOption(this.options.shouldShowPage, type, page, this.currentPage)){
						itemContainerClass = "";
						itemContainer.toggleClass('disabled');
					}
				    text = this.options.itemTexts(type, page, this.currentPage), 
				    title = this.options.tooltipTitles(type, page, this.currentPage);
				case "leftPoint":
					if (!this.getValueFromOption(this.options.shouldShowPage, type, page, this.currentPage)){
						itemContainerClass = "";
					}
				    text = this.options.itemTexts(type, page, this.currentPage), 
				    title = this.options.tooltipTitles(type, page, this.currentPage);
				    break;
				case "rightPoint":
					if (!this.getValueFromOption(this.options.shouldShowPage, type, page, this.currentPage)){
						itemContainerClass = "";
					}
				    text = this.options.itemTexts(type, page, this.currentPage), 
				    title = this.options.tooltipTitles(type, page, this.currentPage);
				    break;
			  }
			if(!isAdd){
				return;
			}else{
				return itemContainer.addClass(itemContainerClass).append(itemContent), itemContent.addClass(itemContentClass).html(text).on("click", null, {
					type: type,
					page: page
				}, $.proxy(this.onPageItemClicked, this)), this.options.pageUrl && itemContent.attr("href", this.getValueFromOption(this.options.pageUrl, type, page, this.currentPage)), this.options.useBootstrapTooltip ? (tooltipOpts = $.extend({}, this.options.bootstrapTooltipOptions, {
					title: title
				}), itemContent.tooltip(tooltipOpts)) : itemContent.attr("title", title), itemContainer
			}
		},
		setCurrentPage: function(page) {
			if (page > this.totalPages || 1 > page){
				//return false;
			};
			this.lastPage = this.currentPage, this.currentPage = parseInt(page, 10)
		},
		getPages: function() {
			var totalPages = this.totalPages,
				pageStart = 0 === this.currentPage % this.numberOfPages ? (parseInt(this.currentPage / this.numberOfPages, 10) - 1) * this.numberOfPages + 1 : parseInt(this.currentPage / this.numberOfPages, 10) * this.numberOfPages + 1,
				output = [],
				i = 0,
				leftPoint = 0,
				rightPoint = 0,
				first = 0,
				last = 0,
				counter = 0;
				var centerNo = 3;
				if(this.numberOfPages%2 == 0){
					centerNo = this.numberOfPages/2;
				}else{
					centerNo = (this.numberOfPages+1)/2;
				}
				var tem =  this.currentPage - (pageStart+(centerNo-1));
				pageStart = pageStart+tem;
				
				if(this.currentPage == totalPages){ //点击的尾页
					pageStart = totalPages-this.numberOfPages+1;
				}
			    for (pageStart = 1 > pageStart ? 1 : pageStart, i = pageStart, counter = 0; counter < this.numberOfPages && totalPages >= i; i += 1, counter += 1){
				  output.push(i);
				}
			    if(pageStart != 1){
			    	leftPoint = 1;
			    	first = 1;
			    }
			    if(output[this.numberOfPages-1] != totalPages && (pageStart + this.numberOfPages) <= totalPages){
			    	rightPoint = 1;
			    	last = totalPages;
			    }
			return output.first = first, output.leftPoint = leftPoint,output.rightPoint = rightPoint,output.prev = this.currentPage > 1 ? this.currentPage - 1 : 1, output.next = this.currentPage < totalPages ? this.currentPage + 1 : totalPages, output.last = last, output.current = this.currentPage, output.total = totalPages, output.numberOfPages = this.options.numberOfPages, output
		},
		getValueFromOption: function(value) {
			var output = null,
				args = Array.prototype.slice.call(arguments, 1);
			return output = "function" == typeof value ? value.apply(this, args) : value
		}
	}, old = $.fn.bootstrapPaginator, $.fn.bootstrapPaginator = function(option) {
		var args = arguments,
			result = null;
		return $(this).each(function(index, item) {
			var $this = $(item),
				data = $this.data("bootstrapPaginator"),
				options = "object" != typeof option ? null : option;
			if (!data) return data = new BootstrapPaginator(this, options), $this = $(data.$element), $this.data("bootstrapPaginator", data), void 0;
			if ("string" == typeof option) {
				if (!data[option]) throw "Method " + option + " does not exist";
				result = data[option].apply(data, Array.prototype.slice.call(args, 1))
			} else result = data.setOptions(option)
		}), result
	}, $.fn.bootstrapPaginator.sizeArray = {
		2: {
			large: "pagination-large",
			small: "pagination-small",
			mini: "pagination-mini"
		},
		3: {
			large: "pagination-lg",
			small: "pagination-sm",
			mini: ""
		}
	}, $.fn.bootstrapPaginator.defaults = {
		containerClass: "",
		showNext:1,
		showPreviouButton:1,
		showNextButton:1, 
		totalNumber:1,
		showGoInput:1,
		showGoButton:1,
		showPageNumbers:1,
		size: "normal",
		alignment: "left",
		bootstrapMajorVersion: 2,
		listContainerClass: "",
		itemContainerClass: function(type, page, current) {
			return page === current ? "active" : ""
		},
		itemContentClass: function(type, page, current) {
			return ""
		},
		currentPage: 1,
		numberOfPages: 5,
		totalPages: 1, //总页数
		pageAllSize:0,//总条数
		pageSize:10,//当前页面显示多少条数据
		pageUrl: function(type, page, current) {
			return null
		},
		onPageClicked: null,
		onPageChanged: null,
		useBootstrapTooltip: !1,
		shouldShowPage: function(type, page, current) {
			var result = !0;
			switch (type) {
				case "first":
					result = 1 !== current;
					break;
				case "leftPoint":
					result = 0;
					break;
				case "prev":
					result = 1 !== current;
					break;
				case "next":
					result = current !== this.totalPages;
					break;
				case "last":
					result = current !== this.totalPages;
					break;
				case "rightPoint":
					result = 0;
					break;
				case "page":
					result = !0
			}
			
			return result
		},
		itemTexts: function(type, page, current) {
			switch (type) {
				case "first":
					return 1;
				case "prev":
					return "上一页";
				case "next":
					return "下一页";
				case "last":
					return this.totalPages;
				case "page":
					return page
				case "leftPoint":
					return "...";
				case "rightPoint":
					return "...";
			}
		},
		tooltipTitles: function(type, page, current) {
			switch (type) {
				case "first":
					return "首页";
				case "prev":
					return "上一页";
				case "next":
					return "下一页";
				case "last":
					return "尾页";
				case "page":
					return page === current ? "当前第 "+page+"页" : " 第" + page +"页"
			}
		},
		bootstrapTooltipOptions: {
			animation: !0,
			html: !0,
			placement: "top",
			selector: !1,
			title: "",
			container: !1
		}
	}, $.fn.bootstrapPaginator.Constructor = BootstrapPaginator
}(window.jQuery);